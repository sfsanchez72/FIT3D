#!/usr/bin/perl
#
#
# This program find peaks in a 2D fiber based spectral image
#f
#
#        ($yfit, $coeffs) = my_linfit1d $pdl_flux_masked,$pdl_model_tmp,$pdl_e;

use Statistics::OLS;
use Math::FFT;
use Math::Stat;
use Math::Spline qw(spline linsearch binsearch);
use Math::Derivative qw(Derivative2);

use Math::Approx;


use Astro::FITS::CFITSIO qw( :longnames :constants );
use PDL;

use PDL::Fit::Polynomial; 
use PDL::Filter::Linear;
use PGPLOT;  # Load PGPLOT module
use PDL::Fit::Gaussian;
use PDL::Image2D;
use  PDL::Fit::Linfit;



use PDL::Core;
use PDL::Basic;
use PDL::Exporter;
@ISA    = qw( PDL::Exporter );
use PDL::Options ':Func';
use PDL::Slatec; # For matinv()



srand(time() | $$);

$vel_light=299792.458;
$red_elines=0.0;

sub my_linfit1d {
   my $opthash = ref($_[-1]) eq "HASH" ? pop(@_) : {} ; 
   my %opt = parse( { Weights=>ones(1) }, $opthash ) ;
   barf "Usage: linfit1d incorrect args\n" if $#_<1 or $#_ > 3;
   my ($y, $fitfuncs, $wt) = @_;
   if ($#_ == 1) {
      ($y, $fitfuncs) = @_;
      $x = $y->xvals;
   }
   
#   my $wt = $opt{Weights};
   
   # Internally normalise data
   
   my $ymean = (abs($y)->sum)/($y->nelem);
   $ymean = 1 if $ymean == 0;
   my $y2 = $y / $ymean;
   
   # Do the fit
      
   my $M = $fitfuncs->xchg(0,1);
   my $C = $M->xchg(0,1) x ($M * $wt->dummy(0)) ;
   my $Y = $M->xchg(0,1) x ($y2->dummy(0) * $wt->dummy(0));

   # Fitted coefficients vector

   my   $a = matinv($C) x $Y;
   
   # Fitted data

   my $yfit = ($M x $a)->clump(2); # Remove first dim=1
   
   $yfit *= $ymean; # Un-normalise
   if (wantarray) {
      my $coeff = $a->clump(2);
      $coeff *= $ymean; # Un-normalise
      return ($yfit, $coeff);
   }
   else{
      return $yfit;
   }  
   
}
*my_linfit1d = \&my_linfit1d;

$F3D=$ENV{FIT3D_PATH}; $F3D=$ENV{FIT3D_PATH}; 
require("$F3D/scripts/my.pl");

require("/home/sanchez/sda2/code/lyon/fitting_tool/user/bin/my_auto_ssp_elines_rnd.pl");

$sec_ini=print_time();

#require "/work1/ssa/perl/MY/my.pl";
#require "/home/sanchez/sda1/perl/MY/my.pl";

$time1=get_time();
if ($#ARGV<5) {
    print "USE: auto_ssp.pl SPEC1.txt SSP_SFH.fits,SSP_KIN.fits OUTFILE MASK_LIST CONFIG_FILE PLOT [min max] [wmin wmax] [redshift_elines_to_mask] [input_redshift delta_redshift min_redshift max_redshift] [input_sigma delta_sigma min_sigma max_sigma] [input_Av delta_Av min_Av max_Av] \n";
    print "CONFIG_FILE:\n";
    print "redshift delta_redshift min_redshift max_redshift\n";
    print "sigma delta_sigma min_sigma max_sigma\n";
    print "Av delta_Av min_Av max_Av [Same range for all]\n";
    print "N_SYSTEMS\n";
    print "(1) START_W END_W MASK_FILE CONFIG_FILE NPOLY MASK_FILE_POLY\n";
    print "...\n";
    print "(N) START_W END_W MASK_FILE CONFIG_FILE NPOLY MASK_FILE_POLY\n";
    print "MIN_DELTA_CHISQ MAX_NITER CUT_MEDIAN_FLUX\n";
    print "start_w_peak end_w_peak\n";
    print "wavelength_to_norm width_AA new_back_templates.fits\n";


    exit;
}



$unc_file=$ARGV[0];
$clean_file="clean_".$ARGV[0];
$JUNK_back_list=$ARGV[1];
if ($JUNK_back_list =~ ",")  {
    ($back_list,$back_list2)=split(",",$ARGV[1]);
} else {
    $back_list=$JUNK_back_list;
    $back_list2=$JUNK_back_list;
}




$outfile=$ARGV[2];
$out_elines="elines_".$outfile;
$out_single="single_".$outfile;
$out_fit="fit_".$outfile;
$out_coeffs_file="coeffs_".$outfile;
$out_fit="output.".$outfile.".fits";
$out_ps=$outfile;

#######################################
# Clean previous results
#######################################
$call="rm -rf ".$outfile;
system($call);
$call="rm -rf ".$out_elines;
system($call);
$call="rm -rf ".$out_single;
system($call);
$call="rm -rf ".$out_fit;
system($call);
#$call="rm -rf ".$out_coeffs_file;
#system($call);

$D_SYS_VEL=100;



$mask_list=$ARGV[3];
$config_file=$ARGV[4];
$plot=$ARGV[5];

$ENV{PGPLOT_FOREGROUND} = "white";
$ENV{PGPLOT_BACKGROUND} = "black";

if ($plot==2) {
    $ENV{PGPLOT_FOREGROUND} = "black";
    $ENV{PGPLOT_BACKGROUND} = "white";
    $dev_plot=$outfile.".ps/CPS";
    $dev_plot_single="single_".$outfile.".ps/CPS";
} else {
    $dev_plot="/xs";
    $dev_plot_single="/xs";
}

$smooth=1;
$MIN_CHISQ=1e12;


$out_file="junk.junk";
$factor=1;
$box=1;


$def=0;
if ($#ARGV==7) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $def=1;
}

if ($#ARGV==9) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $def=2;
}

if ($#ARGV==10) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $elines_mask=$ARGV[10];
    $def=2;
}

$input_redshift=0;
if ($#ARGV==11) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $elines_mask=$ARGV[10];
    $input_redshift=$ARGV[11];
    $redshift=$input_redshift;
    $def=2;
}




#print "$#ARGV $d_redshift\n"; 
open(FH,"<$config_file");
$line=<FH>;
chop($line);
($redshift,$d_redshift,$min_redshift,$max_redshift,$DV,$RV,$DS,$RS,$MIN_W,$MAX_W)=split(" ",$line);


if ($#ARGV==14) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $elines_mask=$ARGV[10];
    $input_redshift=$ARGV[11];
    $input_d_redshift=$ARGV[12];
    $input_min_redshift=$ARGV[13];
    $input_max_redshift=$ARGV[14];
    $redshift=$input_redshift;
    $d_redshift=$input_d_redshift;
    $min_redshift=$input_min_redshift;
    $max_redshift=$input_max_redshift;
    $def=2;
}

$line=<FH>;
chop($line);
($sigma,$d_sigma,$min_sigma,$max_sigma)=split(" ",$line);

if ($#ARGV==18) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $elines_mask=$ARGV[10];
    $input_redshift=$ARGV[11];
    $input_d_redshift=$ARGV[12];
    $input_min_redshift=$ARGV[13];
    $input_max_redshift=$ARGV[14];
    $sigma=$ARGV[15];
    $d_sigma=$ARGV[16];
    $min_sigma=$ARGV[17];
    $max_sigma=$ARGV[18];
    $redshift=$input_redshift;
    $d_redshift=$input_d_redshift;
    $min_redshift=$input_min_redshift;
    $max_redshift=$input_max_redshift;
    $def=2;
}




$line=<FH>;
chop($line);
($Av_IN,$d_Av_IN,$min_Av,$max_Av)=split(" ",$line);
if ($#ARGV==22) {
    $min=$ARGV[6];
    $max=$ARGV[7];
    $min_wave=$ARGV[8];
    $max_wave=$ARGV[9];
    $elines_mask=$ARGV[10];
    $input_redshift=$ARGV[11];
    $input_d_redshift=$ARGV[12];
    $input_min_redshift=$ARGV[13];
    $input_max_redshift=$ARGV[14];
    $sigma=$ARGV[15];
    $d_sigma=$ARGV[16];
    $min_sigma=$ARGV[17];
    $max_sigma=$ARGV[18];
    $Av_IN=$ARGV[19];
    $d_Av_IN=$ARGV[20];
    $min_Av=$ARGV[21];
    $max_Av=$ARGV[22];
    $redshift=$input_redshift;
    $d_redshift=$input_d_redshift;
    $min_redshift=$input_min_redshift;
    $max_redshift=$input_max_redshift;
    $def=2;
}



#if ($input_redshift>0) {
#    $redshift=$input_redshift;
#    $d_redshift=$input_d_redshift;
#    $min_redshift=$input_min_redshift;
#    $max_redshift=$input_max_redshift;
#}


    if ($min_wave =~ ",")  {
	($min_wave,$min_wave2)=split(",",$min_wave);
   } else {
	$min_wave2=$min_wave;
    }

    if ($max_wave =~ ",")  {
	($max_wave,$max_wave2)=split(",",$max_wave);
   } else {
	$max_wave2=$max_wave;
    }
    






$REDSHIFT=$redshift;
$Av_ini=$Av_IN;

if ($d_redshift!=0) {
    $fit_redshift=1;
} else {
    $fit_redshift=0;
}

print "FIT_RED $fit_redshift $d_redshift $#ARGV\n"; #<stdin>;



$line=<FH>;
chop($line);
$ns=$line;
$start_w_min=1e12;
$end_w_max=-1e12;
for ($i=0;$i<$ns;$i++) {
    $line=<FH>;
    chop($line);
    ($start_w_e,$end_w_e,$mask_e,$config_e,$npoly_e,$mask_poly_e,$nmin_e,$nmax_e)=split(" ",$line);
    $start_w_E[$i]=$start_w_e;
    $end_w_E[$i]=$end_w_e;
    $mask_E[$i]=$mask_e;
    $config_E[$i]=$config_e;
#
# We read all the information
#
    my $n_line=0;
    open(CONF,"<$config_e");
    while($conf=<CONF>) {
	chop($conf);
	$config_line_E[$i][$n_line]=$conf;
	$n_line++;
    }
    close(CONF);
    $n_line_E[$i]=$n_line;


    $npoly_E[$i]=$npoly_e;
    $mask_poly_E[$i]=$mask_poly_e;
    $nmin_E[$i]=$nmin_e;
    $nmax_E[$i]=$nmax_e;
    if ($start_w_e<$start_w_min) {
	$start_w_min=$start_w_e;
    }
    if ($end_w_e>$end_w_max) {
	$end_w_max=$end_w_e;
    }
}
$line=<FH>;
chop($line);
($MIN_DELTA_CHISQ,$MAX_NITER,$CUT_MEDIAN_FLUX)=split(" ",$line);
$ABS_MIN=0.5*$CUT_MEDIAN_FLUX;
#print "$CUT_MEDIAN_FLUX\n"; exit;



$line=<FH>;
chop($line);
($start_w_peak,$end_w_peak)=split(" ",$line);
$line=<FH>;
chop($line);
($wave_norm,$w_wave_norm,$new_back_file)=split(" ",$line);
close(FH);

#
# SFH template
#
$pdl_flux_c_ini=rfits($back_list);
($n_c,$nf)=$pdl_flux_c_ini->dims;
$coeffs=zeroes($nf,3);
$crpix=$pdl_flux_c_ini->hdr->{CRPIX1};
$cdelt=$pdl_flux_c_ini->hdr->{CDELT1};
$crval=$pdl_flux_c_ini->hdr->{CRVAL1};

$n_mc=30;

#
# Kinematics template
#
$pdl_flux_c_ini2=rfits($back_list2);
($n_c2,$nf2)=$pdl_flux_c_ini2->dims;
$coeffs2=zeroes($nf2,3);
$crpix2=$pdl_flux_c_ini2->hdr->{CRPIX1};
$cdelt2=$pdl_flux_c_ini2->hdr->{CDELT1};
$crval2=$pdl_flux_c_ini2->hdr->{CRVAL1};



for ($i=0;$i<$nf;$i++) {
    $Av[$i]=$Av_IN;
    $d_Av[$i]=$d_Av_IN;
}







if ($mask_list eq "none") {
    $nmask=0;
} else {
    open(FH,"<$mask_list");
    while($line=<FH>) {
	chop($line);
	@data=split(" ",$line);
	$start_mask[$nmask]=$data[0];
	$end_mask[$nmask]=$data[1];
	$nmask++;
    }
    close(FH);
    $n_mask_org=$nmask;
    open(FH,"<$elines_mask");
    while($line=<FH>) {
	chop($line);
	if ($line !~ "#") {
	    @data=split(" ",$line);
	    $w_eline[$nline]=$data[0];
#	    print "$nline $w_eline[$nline]\n";
#	    $w_eline[$nline]=$data[0];
#    $sigma=$ARGV[15];
	    $start_mask_e[$nmask_e]=$w_eline[$nline]*(1+$input_redshift)-4*$sigma;
	    $end_mask_e[$nmask_e]=$w_eline[$nline]*(1+$input_redshift)+4*$sigma;
	    $nmask_e++;
	    $nline++;
	}
    }
    close(FH);
}


#print "NMASK = $nmask , NMASK_E = $nmask_e\n"; exit;
#
#  We read the input spectrum
#

$n_unc=0;
$y_min=1e12;
$y_max=-1e12;
open(FH,"<$unc_file");
#open(FH,"<spec_auto.input");
$i_scale=0;
$FLUX=0;
$have_error=0;
my @flux_unc;
while($line=<FH>) {
    @data=split(" ",$line);
    if ($line !~ "#") {
    $index_unc[$n_unc]=$data[0];
    $wave_unc[$n_unc]=$data[1];
    $flux_unc[$n_unc]=$data[2];
    $flux_unc_org[$n_unc]=$data[2];
    $flux_unc_input[$n_unc]=$data[2];
    if ($#data>2) {
# Variance Column!
	$e_flux_unc[$n_unc]=sqrt(abs($data[3])); 
	$color_unc[$n_unc]=1;#$data[4];
	$have_error=1;	
    } else {
	$e_flux_unc[$n_unc]=sqrt(abs($data[2]))/10;
	$color_unc[$n_unc]=1;
    }
    if ($flux_unc[$n_unc] eq "nan") {
	$flux_unc[$n_unc]=$flux_unc[$n_unc-1];
    }
    if ($flux_unc[$n_unc]<$y_min) {
	$y_min=$flux_unc[$n_unc];
    }
    if ($flux_unc[$n_unc]>$y_max) {
	$y_max=$flux_unc[$n_unc];
    }
    if ($n_unc>0) {
	if (($wave_unc[$n_unc-1]<=$wave_scale)&&($wave_unc[$n_unc]>$wave_scale)) {
	    $i_scale=$n_unc;	    
	}
    }
    $masked[$n_unc]=1;
    $masked2[$n_unc]=1;
    $masked_Av[$n_unc]=1;

    if ($flux_unc[$n_unc]==0) {
	$masked[$n_unc]=0;	
	$masked2[$n_unc]=0;
    }

    $w_test=$wave_unc[$n_unc-1];
    for ($j=0;$j<$nmask;$j++) {
	if (($w_test>$start_mask[$j])&&($w_test<$end_mask[$j])) {
	    $masked[$n_unc]=0;	    	    
	    $masked2[$n_unc]=0;	    
	    $masked_Av[$n_unc]=0;	    
#	    print "$n_unc $masked_Av[$n_unc]\n";
	}
    }
    
    if ($def==2) {
	if ($w_test<$min_wave) {
	    $masked[$n_unc]=0;	 
	    $masked_Av[$n_unc]=0;
	}
	if ($w_test>$max_wave) {
	    $masked[$n_unc]=0;	    
	    $masked_Av[$n_unc]=0;
	}
	if ($w_test<$min_wave2) {
	    $masked2[$n_unc]=0;	    
	}
	if ($w_test>$max_wave2) {
	    $masked2[$n_unc]=0;	    
	}
    }

    for ($j=0;$j<$nmask_e;$j++) {
	if (($w_test>$start_mask_e[$j])&&($w_test<$end_mask_e[$j])) {
	    $masked2[$n_unc]=0;	 
	    $masked_Av[$n_unc]=0;   
	}
    }


    $flux_masked[$n_unc]=$flux_unc[$n_unc]*$masked[$n_unc];
    $flux_masked2[$n_unc]=$flux_unc[$n_unc]*$masked2[$n_unc];
    if (($wave_unc[$n_unc]>$min_wave)&&($wave_unc[$n_unc]<$max_wave)) {
	$FLUX=$FLUX+$flux_masked[$n_unc];
    }

    $e_flux_unc_kin[$n_unc]=$e_flux_unc[$n_unc];#*($wave_unc[$n_unc]/$wave_unc[0])**2;

#    print "$flux_unc[$n_unc] $e_flux_unc[$n_unc]\n";
    $n_unc++;
    }
}
close(FH);
#exit;

if ($def==2) {
    $y_min=$min;
    $y_max=$max;
} else {
    ($min_wave,$max_wave)=minmax(@wave_unc);
#    $min_wave=$wave_unc[0];
#    $max_wave=$wave_unc[$n_unc-1];
}

#print "$def $min_wave $max_wave\n";
#exit;

if ($def==1) {
    $y_min=$min;
    $y_max=$max;
}
#
# We check the median value
#
$median_flux=median(@flux_masked);
#open(MOUT,">median.flux");
#print MOUT "$median_flux\n";
#close(MOUT);
$dpix_unc=$wave_unc[1]-$wave_unc[0];

$max=3*$median_flux;


my $pdl_output=zeroes($n_unc,6);

#
# We create a kernel
#


#print "We start the fit...\n";

#open(OUT,">$outfile");

$med_flux=median(@flux_unc);
#$min_chi_sq=FIT_simple($redshift,$sigma,\@Av);

$chi_sq_min_now=1e12;
my $pdl_mod_SSP;
my $pdl_res_SSP;


($min_chi_sq)=fit_ssp_lin_no_zero($redshift,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked_Av,\@e_flux_unc,\@flux_unc,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
#exit;

print "CUT = $med_flux $CUT_MEDIAN_FLUX\n";
print "$redshift,$sigma\n"; #<stdin>;
if ($med_flux<$ABS_MIN) {
# WHAT TO DO???
# We print all!!!

    exit;
}

if ($med_flux>$CUT_MEDIAN_FLUX) {

    
    
    
    if ($MIN_W==0) {
	$MIN_W=$min_wave;
    }
    
    if ($MAX_W==0) {
	$MAX_W=$max_wave;
    }
    
#print "$MIN_W,$MAX_W\n"; exit;

################
# REDSHIFT DETERMINATION


    $my_plot=$plot;
#    if ($plot==3) {
#	$plot=0;
 #   }
    $K=0;
#    open(CHI,">chi_r.txt");
    $nr=0;
    my @chi_r;
    my @red_r;
    if ($d_redshift>0) {
	$min_chi_sq=1e30;	
	
	$RED=$min_redshift;
	do {
#	    $chi_now=FIT_Z_SIGMA($RED,$sigma,\@Av);
	    
	#    ($chi_now,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP)=fit_ssp_lin($RED,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

#    ($chi_now)=fit_ssp_lin($RED,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc_kin,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
    ($chi_now)=fit_ssp_lin_no_zero_no_cont($RED,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc_kin,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

	    $chi_r[$nr]=$chi_now;
	    $red_r[$nr]=$RED;

#	    print "$nr  $red_r[$nr] $chi_r[$nr]<>$min_chi_sq\n";	    
	    
#	    if (($nr>1)&&($chi_r[$nr-1]<$chi_r[$nr-2])&&($chi_r[$nr-1]<$chi_r[$nr])&&($chi_r[$nr-1]<$min_chi_sq)) {
	    if (($nr>1)&&($chi_r[$nr-1]<$min_chi_sq)) {
		$redshift=$red_r[$nr-1];	
		$min_chi_sq=$chi_r[$nr-1];	
		$K=$nr-1;
#		$RED=$max_redshift;
	    } 
#	    print CHI "$nr $chi_r[$nr] $red_r[$nr] $redshift $min_chi_sq\n";
#	    print "$nr $chi_r[$nr] $red_r[$nr] $redshift $min_chi_sq\n";
	    
	    $nr++;
	    $RED=$RED+$d_redshift;

	}  while ($RED<$max_redshift);
#
# TWO
#
	$e_redshift=$d_redshift;
	$nr=0;
	$RED=$redshift-1.5*$d_redshift;
	$max_redshift=$redshift+1.5*$d_redshift;
	$d_redshift=0.1*$d_redshift;
#	$d_redshift=0.001;
	do {

#	($chi_now,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP)=fit_ssp_lin($RED,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
	($chi_now)=fit_ssp_lin_no_zero_no_cont($RED,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

#	    $chi_now=FIT($RED,$sigma,\@Av);
	    $chi_r[$nr]=$chi_now;
	    $red_r[$nr]=$RED;
#	    if ($nr==0) {
#		$redshift=$sigma_s[$nr];
#		$min_chi_sq=$chi_now;
#	    }

	    if (($nr>1)&&($chi_r[$nr-1]<$chi_r[$nr-2])&&($chi_r[$nr-1]<$chi_r[$nr])&&($chi_r[$nr-1]<=$min_chi_sq)) {
		my $a=$red_r[$nr-2];
		my $b=$red_r[$nr-1];
		my $c=$red_r[$nr];
		my $fa=$chi_r[$nr-2];
		my $fb=$chi_r[$nr-1];
		my $fc=$chi_r[$nr];
		my $den=($fc-2*$fb+$fa);
		$redshift=$c-($b-$a)*(($fc-$fb)/$den+0.5);
		my $slope=abs(0.5*($fc-$fb)/($c-$b))+abs(0.5*($fa-$fb)/($a-$b));
		if ($slope>0) {
		    $e_redshift=0.01*$redshift/$slope;
		} else {
		    $e_redshift=0.01*$redshift;
		}
		#$e_redshift=abs(($a*$fa-$c*$fc)/(2*$fb));
#$red_r[$nr-1];	
		$min_chi_sq=$chi_r[$nr-1];	
		$K=$nr-1;
	#	$RED=$max_redshift;
	    }
#	    print CHI "$nr $chi_r[$nr] $red_r[$nr] $redshift $min_chi_sq\n";
#	    print "$nr $chi_r[$nr] $red_r[$nr] $redshift $min_chi_sq\n";    
	    $nr++;
	    $a_rnd=random(2);
#	    $Av_NOW=$Av_NOW+$d_Av_IN*($a_rnd->at(0));
	    $RED=$RED+$d_redshift*($a_rnd->at(0));
	}  while ($RED<$max_redshift);

	$fit_redshift=0;
	$d_redshift=0;
    } else {
	$fit_redshift=0;
	$e_redshift=0;
    }
#   close(CHI);
    

    print "REDSHIFT = $redshift +- $e_redshift\n";	#<stdin>;
    $REDSHIFT=$redshift;


# sigma DETERMINATION
    
    $K=0;
#    open(CHI,">chi_s.txt");
    $nr=0;
    my @chi_s;
    my @sigma_s;
    print "D_SIGMA = $d_sigma\n";
    if ($d_sigma>0) {
	$min_chi_sq=1e30;
#    $sigma=$min_sigma;
	$SIGMA=$min_sigma;
	
	do {
#	    $chi_now=FIT_Z_SIGMA($redshift,$SIGMA,\@Av);
#	($chi_now,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP)=fit_ssp_lin($redshift,$SIGMA,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
#	($chi_now)=fit_ssp_lin($redshift,$SIGMA,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
	($chi_now)=fit_ssp_lin_no_zero_no_cont($redshift,$SIGMA,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
#	    $chi_now=FIT($redshift,$SIGMA,\@Av);
	    $chi_s[$nr]=$chi_now;
	    $sigma_s[$nr]=$SIGMA;
#	if ($chi_now<$min_chi_sq) {
#	    if (($nr>1)&&($chi_s[$nr-1]<$chi_s[$nr-2])&&($chi_s[$nr-1]<$chi_s[$nr])&&($chi_s[$nr-1]<$min_chi_sq)) {
	    if ($chi_s[$nr-1]<$min_chi_sq) {
		$sigma=$sigma_s[$nr-1];	
		$min_chi_sq=$chi_s[$nr-1];    
		$K=$nr;
#		$SIGMA=$sigma;
	    }
#	    $sigma=$sigma_s[$K-1];
	   # print CHI "$nr $chi_s[$nr] $sigma_s[$nr] $sigma $min_chi_sq\n";
	    $nr++;
	    $SIGMA=$SIGMA+$d_sigma;

	} while ($SIGMA<$max_sigma);

#	print "PASSED $SIGMA\n";	
	$SIGMA=$sigma-1.5*$d_sigma;
	$max_sigma=$sigma+1.5*$d_sigma;
	$d_sigma=0.33*$d_sigma;
	$nr=0;
	$e_sigma=$d_sigma;
	do {
#	    $chi_now=FIT_Z_SIGMA($redshift,$SIGMA,\@Av);
#	($chi_now,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP)=fit_ssp_lin($redshift,$SIGMA,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
	($chi_now)=fit_ssp_lin_no_zero_no_cont($redshift,$SIGMA,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked2,\@e_flux_unc,\@flux_masked2,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);
#	    $chi_now=FIT($redshift,$SIGMA,\@Av);
	    $chi_s[$nr]=$chi_now;
	    $sigma_s[$nr]=$SIGMA;
#	    if ($nr==0) {
#		$sigma=$sigma_s[$nr];
#		$min_chi_sq=$chi_now;
#	    }
#	if ($chi_now<$min_chi_sq) {
	    if (($nr>1)&&($chi_s[$nr-1]<$chi_s[$nr-2])&&($chi_s[$nr-1]<$chi_s[$nr])&&($chi_s[$nr-1]<=$min_chi_sq)) {
		my $a=$sigma_s[$nr-2];
		my $b=$sigma_s[$nr-1];
		my $c=$sigma_s[$nr];
		my $fa=$chi_s[$nr-2];
		my $fb=$chi_s[$nr-1];
		my $fc=$chi_s[$nr];
		my $den=($fc-2*$fb+$fa);
		$sigma=$c-($b-$a)*(($fc-$fb)/$den+0.5);
		#print "$e_sigma=0.65*$sigma/$slope $slope=abs(0.5*($fc-$fb)/($c-$b))+abs(0.5*($fa-$fb)/($a-$b));\n";
#		$e_sigma=abs(($a*$fa-$c*$fc)/(2*$fb));
#		$sigma=$sigma_s[$nr-1];	
		$min_chi_sq=$chi_s[$nr-1];    
		$K=$nr;
		$SIGMA=$max_sigma;
	    }
#	    print CHI "$nr $chi_s[$nr] $sigma_s[$nr] $sigma $min_chi_sq\n";
#	    print "$nr $chi_s[$nr] $sigma_s[$nr] $sigma $min_chi_sq\n";
	    $nr++;
	    $a_rnd=random(2);
#	    $Av_NOW=$Av_NOW+$d_Av_IN*($a_rnd->at(0));
#	    $RED=$RED+$d_redshift*($a_rnd->at(0));
	    $SIGMA=$SIGMA+$d_sigma*($a_rnd->at(0));

	} while ($SIGMA<$max_sigma);


	my $slope=($chi_s[$nr-1]-$min_chi_sq)/($sigma_s[$nr-1]-$sigma);
	if ($slope>0) {
	    $e_sigma=$sigma/$slope/10;
	} else {
	    $e_sigma=$sigma/10;
	}
	
	$fit_sigma=0;
	$d_sigma=0;
    } else {
	$fit_sigma=0;
	$e_sigma=0;
   }
#    close(CHI);
	$sigma=abs($sigma);
	$e_sigma=abs($e_sigma);
    print "SIGMA = $sigma+-$e_sigma\n";
} else {
#
# Below the cut!
#
    for ($i=0;$i<$nf;$i++) {
	$Av[$i]=0;
	$d_Av[$i]=0;
    }

#    $chi_now=FIT_Z_SIGMA($RED,$sigma,\@Av);
}
#print "Av det\n";
# Av DETERMINATION
#($Av_IN,$d_Av_IN,$min_Av,$max_Av)=split(" ",$line);
    $K=0;
 #   open(CHI,">chi_Av.txt");
    $nr=0;
    my @chi_Av;
    my @Av_s;
    print "D_Av = $d_Av_IN\n";
#$d_Av_IN=$d_Av_IN*0.1;

$K=0;
$nr_min=0;
    if ($d_Av_IN>0) {
	$min_chi_sq=1e30;
	$Av_NOW=$min_Av;
	do {
	    for ($i=0;$i<$nf;$i++) {
		$Av[$i]=$Av_NOW;
	    }

#	    print "$Av_NOW start\n";

#	($chi_now)=fit_ssp_lin($redshift,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

#
# Not allow negative coeffs!!!!
#
	($chi_now)=fit_ssp_lin_no_zero($redshift,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked_Av,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);



#	    print "$Av_NOW end\n";
#	    $chi_now=FIT_simple($redshift,$sigma,\@Av);
	    $chi_Av[$nr]=$chi_now;
	    $Av_s[$nr]=$Av_NOW;
	    if ($chi_now>0) {
		$Av_p_chi[$nr]=$Av_NOW/($chi_now);
	    }
	       
	    if (($K==0) &&($chi_Av[$nr]<$min_chi_sq)) {
		$Av_F=$Av_s[$nr];
		$nr_min=$nr;
#		print "AV_F = $Av_F $nr_min\n";
		$min_chi_sq=$chi_now;
	    }



#	    print "(($nr>1)&&($chi_Av[$nr-1]<$chi_Av[$nr-2])&&($chi_Av[$nr-1]<$chi_Av[$nr])&&($chi_Av[$nr-1]<$min_chi_sq))\n";

	    if (($nr>1)&&($chi_Av[$nr-1]<$chi_Av[$nr-2])&&($chi_Av[$nr-1]<$chi_Av[$nr])&&($chi_Av[$nr-1]<=$min_chi_sq)) {
		my $a=$Av_s[$nr-2];
		my $b=$Av_s[$nr-1];
		my $c=$Av_s[$nr];
		my $fa=$chi_Av[$nr-2];
		my $fb=$chi_Av[$nr-1];
		my $fc=$chi_Av[$nr];
		my $den=($fc-2*$fb+$fa);
		$Av_F=$c-($b-$a)*(($fc-$fb)/$den+0.5);
		$min_chi_sq=$chi_Av[$nr-1];    
		$K=$nr;
	    }
	    $nr++;

	    $a_rnd=random(2);
	    $Av_NOW=$Av_NOW+$d_Av_IN*($a_rnd->at(0));


	} while ($Av_NOW<$max_Av);

	if ($Av_s[$nr-1]!=$Av_F) {
	    my $slope=($chi_Av[$nr-1]-$min_chi_sq)/($Av_s[$nr-1]-$Av_F);
	    if ($slope>0) {
		$e_Av=abs($Av_F/$slope/3)#/10000);
	    } else {
		$e_Av=$d_Av_IN;
	}
	} else {
	    $e_Av=$d_Av_IN;
	}
	$fit_Av=0;
	$d_Av_NOW=0;
    } else {
	$fit_Av=0;
    }

#print "@Av_s @chi_Av\n";

#my $title="Av vs Chi";
#plot_results($plot,pdl(@Av_s),pdl(@chi_Av),$out_ps_now,$title);
#print "@chi_Av\n";
#exit;

#close(CHI);

if ($d_Av_IN==0) {
    $Av_F=$Av_IN;
}

if ($e_Av==0) {
    $e_Av=$d_Av_IN;
}



print "AV = $Av_F +- $e_Av\n";


for ($i=0;$i<$nf;$i++) {
    $Av[$i]=$Av_F;
}

#$call="cat chi_s.txt";
#system($call);

#exit;

#print "PASSED\n";

#$call="table_plot.pl chi_r.txt 0 1 'N.Iter' 'Chi' 101/xs";
#system($call);
#$call="table_plot.pl chi_r.txt 2 1 'Redshift' 'Chi' 102/xs";
#system($call);
#exit;

#
# 
#
#if ($have_error==0) {
 #   @e_flux_unc=median_filter(2.345,\@res_spec);
  # for ($i=0;$i<$n_unc;$i++) {
#	$e_flux_unc[$i]=2.345*abs($e_flux_unc[$i]);
 #   }
#}


#$redshift=$redshift-$d_redshift;
#print "REDSHIFT = $redshift\n";





$fit_redshift=0;

#print "REDSHIFT = $redshift\n";
$redshift_abs=$redshift;
#exit;

#exit;

#print "($redshift,$sigma,\@Av) $min_chi_sq\n";
#print "----------------------\n";
$delta_chi=10;
#while (($min_chi_sq>1)&&($delta_chi>0.1)) {
$NITER=0;
$niter_tmp_max=10;


$chi_sq_min_now=1e12;
$min_chi_sq_limit=$min_chi_sq;

$n_mc=10;
$plot=$my_plot;

#($min_chi_sq)=fit_ssp_lin($redshift,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

my $pdl_rat_master=ones($n_unc+1);

($min_chi_sq,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_model_spec_min,$pdl_res)=fit_ssp_lin_no_zero($redshift,$sigma,\@Av,$crval2,$cdelt2,$crpix2,$nf2,$n_c2,$pdl_flux_c_ini2,\@wave_unc,\@masked_Av,\@e_flux_unc,\@flux_unc,$n_mc,$chi_sq_min_now,$min_chi_sq,$plot);

#
# We substract the continuum!
# 

    $pdl_mod_SSP=$pdl_model_spec_min;
    $pdl_res_SSP=$pdl_res;
my $nx=$n_unc;
my $i0_now=int(0.4*$nx);
my $i1_now=int(0.6*$nx);
my @stats_res=stats($pdl_res->slice("$i0_now:$i1_now"));
my @stats_mod=stats($pdl_model_spec_min->slice("$i0_now:$i1_now"));
my $SN=0;
if ($stats_res[1]>0) {
    $SN=$stats_mod[0]/$stats_res[1];
}
print "Signal-to-Noise = $SN\n";

$old=1;
if (($old==1)&&($SN>10)) {
    my $pdl_rat=$pdl_res/$pdl_model_spec_min+1;
    my @rat=list($pdl_rat);
    my @med_rat=median_filter(int(5*2.354*$sigma),\@rat);
    $pdl_med_rat=pdl(@med_rat);
    
    my $n_unc_1=$n_unc-1;
    my $pdl_wave_unc=$wave_unc[0]+($wave_unc[1]-$wave_unc[0])*pdl(0..$n_unc_1);
    
    
    my @med_rat=median_filter(int(7*2.354*$sigma),\@rat);

    my $med_sigma=int(1.5*$sigma);
    if ($med_sigma<3) {
	$med_sigma=3;
    }
    my @med_rat_box=median_box($med_sigma,\@med_rat);
    my @med_wave_box=median_box($med_sigma,\@wave_unc);

    
    my $y_rat = interpol(pdl(@wave_unc), pdl(@med_wave_box), pdl(@med_rat_box));
    
    
#$pdl_med_rat=pdl(@med_rat);
    
    
    

    
#my ($yfit_leg, $coeff_leg)=fit_legendre($pdl_wave_unc,$pdl_med_rat,7);

    if ($plot==1) {
	my $out_ps_now="junk";
	my $title="ratio";
	plot_results_min_max(1,pdl(@wave_unc),pdl(pdl(@flux_unc),$pdl_model_spec_min,$pdl_res,$pdl_rat,$y_rat),$out_ps_now,$title,-0.2,1.5);
    }
    
    my $i0_now=int(0.4*$n_unc);
    my $i1_now=int(0.6*$n_unc);
    my @stats_rat=stats($y_rat->slice("$i0_now:$i1_now"));

    if (($stats_rat[0]>0)&&($stats_rat[1]>0.02)) {
	for ($i=0;$i<$n_unc;$i++) {
	    my $val=$y_rat->at($i);
	    if ($val>0) {
		$flux_unc[$i]=$flux_unc[$i]/$val;
	    }
#	$flux_unc_org[$i]=$flux_unc_org[$i]/$val;
	}
    }
    
}





print "Deriving SFH....\n";

my $pdl_mod_JOINT;
my $pdl_res_JOINT;
my $pdl_no_gas;
my $age_min;
my $met_min;
my $Av_min;
my $age_min_mass;
my $met_min_mass;
my $Av_min_mass;
my $coeffs_cat=zeroes($nf+1,$n_mc);
while (($MIN_CHISQ>$MIN_DELTA_CHISQ)&&($NITER<$MAX_NITER)) {
    if ($NITER==1) {
	$MIN_CHISQ=1e12;
    }


######################################################################
# Fitting the emission lines
######################################################################

	my @a_fixed;
	my @a_type_fixed;
	my $n_mod_fixed=0;
    if ($ns>0) {

    $ks=0;
    $SYS_VEL=$vel_light*$REDSHIFT;
#    $call="rm ".$out_elines." > junk.junk";
    my @REN;
    my @e_REN;
    system($call);
    for ($is=0;$is<$ns;$is++) {
	if ($red_elines>0) {
	    $SYS_VEL=$vel_light*$red_elines;
	    if ($is==0) {
		$SYS_VEL_MAX=$vel_light*$red_elines+$D_SYS_VEL;
		$SYS_VEL_MIN=$vel_light*$red_elines-$D_SYS_VEL;
	    } else {
		$SYS_VEL_MAX=$vel_light*$red_elines+$D_SYS_VEL;
		$SYS_VEL_MIN=$vel_light*$red_elines-$D_SYS_VEL;
	    }
	} else {
	    $SYS_VEL=$vel_light*$REDSHIFT;
	    if ($is==0) {
		$SYS_VEL_MAX=$vel_light*$REDSHIFT+$D_SYS_VEL;
		$SYS_VEL_MIN=$vel_light*$REDSHIFT-$D_SYS_VEL;
	    } else {
		$SYS_VEL_MAX=$vel_light*$REDSHIFT+$D_SYS_VEL;
		$SYS_VEL_MIN=$vel_light*$REDSHIFT-$D_SYS_VEL;
	    }
	}
	$start_w_e=$start_w_E[$is];
	$end_w_e=$end_w_E[$is];
	$mask_e=$mask_E[$is];
	$config_e=$config_E[$is];
	$npoly_e=$npoly_E[$is];
	$mask_poly_e=$mask_poly_E[$is];
	$nmin_e=$nmin_E[$is];
	$nmax_e=$nmax_E[$is];


	
	print "CONF=$config_e\n";

	my @wave_elines;
	my @flux_elines;
	my @flux_e_elines;
	my @masked_elines;
	$n_e=0;
	for ($i=0;$i<$n_unc;$i++) {
	    if (($wave_unc[$i]>$start_w_e)&&($wave_unc[$i]<$end_w_e)) {
		$wave_elines[$n_e]=$wave_unc[$i];
		$flux_elines[$n_e]=$flux_unc_org[$i]-$pdl_mod_SSP->at($i);#$pdl_res_SSP->at($i);
		$flux_e_elines[$n_e]=(abs($e_flux_unc[$i]));
		$masked_elines[$n_e]=1;
		$n_e++;
	    }
	}
	my $pdl_wave_elines=pdl(@wave_elines);
	my $pdl_flux_elines=pdl(@flux_elines);
	my $pdl_flux_e_elines=pdl(@flux_e_elines);
#	my @stats_now=stats($pdl_flux_elines);
#	$pdl_flux_e_elines=0.5*sqrt(abs($pdl_flux_e_elines+$stats_now[1]));


	my $pdl_masked_elines=pdl(@masked_elines);
	my @stats=stats($pdl_flux_elines);
	my $y_max=$stats[4]-$stats[0];
	my $def=1;


	
#	open(CNF,"<$config_e");
#	$cnf=<CNF>; chop($cnf);
	$cnf=$config_line_E[$is][0];
	($junk,$n_mod,$chi_goal,$d_chi_goal)=split(" ",$cnf);
	my $n_line=$n_line_E[$is];
	my $i_mod=1;
	for ($ii=0;$ii<$n_mod;$ii++) {
	    $cnf=$config_line_E[$is][$i_mod]; 	    $i_mod++;

#	    $cnf=<CNF>; chop($cnf);
	    $type[$ii]=$cnf;
	    for ($j=0;$j<9;$j++) {
		$cnf=$config_line_E[$is][$i_mod]; 	    $i_mod++;

#		$cnf=<CNF>; chop($cnf);
		@data=split(" ",$cnf);
#		if ($type[$ii] ne "poly1d") {
		$a[$ii][$j]=$data[0];
		$ia[$ii][$j]=$data[1];
#		} else {
#		    $a[$ii][$j]=0;
#		    $ia[$ii][$j]=0;
#		}
		$ea[$ii][$jj]=0;
		$a0[$ii][$j]=$data[2];
		$a1[$ii][$j]=$data[3];
		$link[$ii][$j]=$data[4];
	    }
	    
	    if ($def==1) {
		$a1_max=2*$y_max*($a[$ii][2]*((2*3.1416)**0.5));
		$a0_min=0.01*1.2*$y_max*($a[$ii][2]*((2*3.1416)**0.5));
		if ($a1[$ii][1]>$a1_max) {
		    $a1[$ii][1]=$a1_max;
		    $a0[$ii][1]=$a0_min;
		}
	    }
#	    print "$ii,$a0[$ii][1],$a0_ini[$ii][1]\n";
	}
	close(CNF);
	
	#
	# Force vicitiny in the velocity
	#
	$a[0][3]=$SYS_VEL;
	$ia[0][3]=1;
	$a0[0][3]=$SYS_VEL_MIN;	
	$a1[0][3]=$SYS_VEL_MAX;

	



	my $i_ter=0;
	my $n_loops=5;
	$n_mc_e=30;
	$break=0;
	$scale_ini=0.15;
	$def=0;
	my $pdl_model=zeroes($n_e);
	my $pdl_model_cont=zeroes($n_e);
	my $pdl_model_tmp=zeroes($n_e);
	my $pdl_model_cont_tmp=zeroes($n_e);
#	print "START FIT ($n_e)\n";
	@a_out_now=copy_a($n_mod,\@a);
	@a_out_tmp=copy_a($n_mod,\@a);
        $chi_sq_now=1e12;
	my @a_results;
	$nnk=0;

	my $max_time=5;
	my $time=get_seconds();
	my $d_time=get_seconds()-$time;
	my $i_loops=0;
	srand(time);
	while (($i_ter<$n_loops)&&($break==0)) {
	    my $chi_iter=$chi_sq_now;
#	    $d_time=get_seconds()-$time;
#	    srand(time);
	    $chi_single=0;
#	    ($chi_sq_now,$pdl_a,$pdl_model_tmp,$pdl_model_cont_tmp)=fit_elines_grad_rnd($pdl_wave_elines,$pdl_flux_elines,$pdl_flux_e_elines,$n_mod,$chi_goal,$d_chi_goal,\@type,\@a_out_tmp,\@ia,\@a0,\@a1,\@link,$n_mc_e,$pdl_masked_elines,$def,$scale_ini,4,$max_time);
	    ($chi_sq_now,$pdl_a,$pdl_model_tmp,$pdl_model_cont_tmp)=fit_elines_grad_rnd_new($pdl_wave_elines,$pdl_flux_elines,$pdl_flux_e_elines,$n_mod,$chi_goal,$d_chi_goal,\@type,\@a_out_tmp,\@ia,\@a0,\@a1,\@link,$n_mc_e,$pdl_masked_elines,$def,$scale_ini,$max_time);
	    @a_out_now=copy_a_pdl($n_mod,$pdl_a);
	    #print "$chi_sq_now<$chi_iter $i_loops $i_ter\n";
	    if ($chi_sq_now<$chi_iter) {

############################################################                                                         # Close to a result, narrow the range                                                                              

		for ($i=0;$i<$n_mod;$i++) {
		    for ($j=0;$j<9;$j++) {
			if ($type[$i] eq "eline") {
			    if ($ia[$i][$j]==1) {
				if ($link[$i][$j]==-1) {
				    my $delta_now=abs($a1[$i][$j]-$a0[$i][$j])/(2);
				    my $a0_tmp=$a0[$i][$j];
				    my $a1_tmp=$a1[$i][$j];
				    if ($j!=3) {
					$a0_tmp=$a_out_now[$i][$j]-$delta_now;
					$a1_tmp=$a_out_now[$i][$j]+$delta_now;
				    } else {
					$a0_tmp=$a_out_now[$i][$j]-0.5*$delta_now;
					$a1_tmp=$a_out_now[$i][$j]+0.5*$delta_now;
				    }
				    if ($a0_tmp<$a0[$i][$j]) {
					$a0_tmp=$a0[$i][$j];
				    }
				    if ($a1_tmp>$a1[$i][$j]) {
					$a1_tmp=$a1[$i][$j];
				    }
				    $a0[$i][$j]=$a0_tmp;
				    $a1[$i][$j]=$a1_tmp;
				}
			    }
			}
		    }
		}

######################################                             



		@a_out_tmp=copy_a($n_mod,\@a_out_now);
		@a_results=copy_a_results($n_mod,$nnk,\@a_out_now,\@a_results);    
		$pdl_model=$pdl_model_tmp;
		$pdl_model_cont=$pdl_model_cont_tmp;
		$nnk++;
		$i_ter++;
	    } else {
		my $rnd_a=random(10);
		@a_out_now=copy_a($n_mod,\@a_out_now);
		$i_loops++;
		if ($i_loops>5*$n_loops) {
		    $break=1;
		}
	    }
	}
	my $out_ps_now="fit_".$outfile.".".$start_w_e."_".$end_w_e;
	my $title="[$start_w_e,$end_w_e]";
	plot_results($plot,$pdl_wave_elines,pdl($pdl_flux_elines,$pdl_model,($pdl_flux_elines-$pdl_model)),$out_ps_now,$title);

	print "----------------------------------------\n";
	@a_final=mean_a_results_last($n_mod,$nnk,\@a_results);
	print_a_final($n_mod,\@a_final,\@type,$chi_sq_now);
	$out_fit_spectra=$out_elines;
	print_a_final_file_add($n_mod,\@a_final,\@type,$chi_sq_now,$out_fit_spectra);

#	my $iiF,$jF;
#	for ($iiF=0;$iiF<$n_mod;$iiF++) {   
#	    $a_type_fixed[$iiF+$n_mod_fixed]=$a_type[$iiF];
#	for ($jF=0;$jF<9;$jF++) {
#	    $a_final_fixed[$iiF+$n_mod_fixed][$jF]=$a_final[$iiF][$jF];
#	}
#	}
#	$n_mod_fixed=$n_mod_fixed+$n_mod;
	
	($n_mod_fixed,$junk_a_fixed,$junk_a_type_fixed)=add_a_results_elines($n_mod,\@a_final,\@type,$n_mod_fixed,\@a_fixed,\@a_type_fixed);
	@a_fixed=@$junk_a_fixed;
	@a_type_fixed=@$junk_a_type_fixed;



	$nmin_e=int(0.1*$n_unc);
	$nmax_e=int(0.9*$n_unc);

###############################
# Low order polynomical!
#	$call="spec2img.pl sub_spec.txt res_spec.fits 1";
#	system($call);
#	$call="polyfit_mask.pl res_spec.fits 6 res_poly.fits ".$mask_poly_e." ".$nmin_e." ".$nmax_e." /null";
#	system($call);
#	$call="imarith.pl res_spec.fits - res_poly.fits new_res.fits";
#	system($call);
#	$call="img2spec.pl new_res.fits 0 new_res.txt";
#	system($call);

	$out_fit_now=$out_fit.".".$start_w_e."_".$end_w_e.".ps/CPS";
	$box=int($sigma*6);
	
	print "DONE FIT ELINES CONFIG $is\n";
    }


#
# We create a FIXED model of the emission lines
#

    my $pdl_model_elines=zeroes($n_unc);
    my $pdl_model_cont=zeroes($n_unc);
    my $pdl_wave_elines=pdl(@wave_unc);
    my ($NN)=$pdl_wave_elines->dims;
    my ($NN1)=$pdl_model_elines->dims;
    for ($i=0;$i<$n_mod_fixed;$i++) {
	my $pdl_tmp=create_single_model($pdl_wave_elines,$i,\@a_type_fixed,\@a_fixed);
	my ($NN2)=$pdl_tmp->dims;
	$pdl_model_elines=$pdl_model_elines+$pdl_tmp;
    }



    #
    # We remove the gas before a new iteration
    #
    
#    @model_join
    for ($i=0;$i<$n_unc;$i++) {
	$flux_unc[$i]=$flux_unc_org[$i]-$pdl_model_elines->at($i);
    }

#    @model_join
    for ($i=0;$i<$n_unc;$i++) {
	$flux_unc[$i]=$flux_unc_org[$i]-$pdl_model_elines->at($i);
    }

    $pdl_mod_JOINT=$pdl_mod_SSP+$pdl_model_elines;
    $pdl_res_JOINT=$pdl_res_SSP-$pdl_model_elines;
    $pdl_no_gas=pdl(@flux_unc);

#    if ($old==1) {
#############################################################
# We rescale!
##############################################################
	my $y_rat=ones($nx+1);
	if ($SN>10) {
	    my $pdl_rat=$pdl_res_JOINT/$pdl_mod_JOINT+1;
	    my @rat=list($pdl_rat);
	    my $n_unc_1=$n_unc-1;
	    my $pdl_wave_unc=$wave_unc[0]+($wave_unc[1]-$wave_unc[0])*pdl(0..$n_unc_1);
	    my @med_rat=median_filter(int(5*2.354*$sigma),\@rat);
	    my $med_sigma=int(1.5*$sigma);
	    if ($med_sigma<3) {
		$med_sigma=3;
	    }
	    my @med_rat_box=median_box($med_sigma,\@med_rat);
	    my @med_wave_box=median_box($med_sigma,\@wave_unc);
#	    my @med_rat_box=median_box(int(1.5*$sigma),\@med_rat);
#	    my @med_wave_box=median_box(int(1.5*$sigma),\@wave_unc);    
	    $y_rat = interpol(pdl(@wave_unc), pdl(@med_wave_box), pdl(@med_rat_box));

	    my $i0_now=int(0.4*$nx);
	    my $i1_now=int(0.6*$nx);
	    my @stats_rat=stats($y_rat->slice("$i0_now:$i1_now"));
	    
	    if ($plot==1) {
		my $out_ps_now="junk";
#		print "STATS RAT = @stats_rat\m";
		my $title="ratio = ".$stats_rat[0].", rms=".$stats_rat[1];
		print "$title\n";
		plot_results_min_max(1,pdl(@wave_unc),pdl(pdl(@flux_unc),$pdl_model_spec_min,$pdl_res,$pdl_rat,$y_rat),$out_ps_now,$title,-0.2,1.5);
	    }

	    if (($stats_rat[0]>0)&&($stats_rat[1]>0.02)) {
		if ($jy==0) {
# Continuum shape correction on/off
		    $pdl_rat_master=$y_rat;
		    $y_rat=$pdl_rat_master;
		} else {
		    $y_rat=$pdl_rat_master;
		}
	    }
	}

	for ($i=0;$i<$n_unc;$i++) {
	    my $val=$y_rat->at($i);
	    if ($val>0) {
		$flux_unc[$i]=$flux_unc[$i]/$val;
		$flux_unc_org[$i]=$flux_unc_org[$i]/$val;
	    }
	}
##############################################################
# End re-scale
##############################################################    










    $ML=0;


    if ($med_flux>$CUT_MEDIAN_FLUX) {
	$n_mc=20;
	($min_chi_sq,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP,$coeffs_N_input,$e_coeffs_N_input)=fit_ssp_lin_MC($redshift,$sigma,\@Av,$crval,$cdelt,$crpix,$nf,$n_c,$pdl_flux_c_ini,\@wave_unc,\@masked,\@e_flux_unc,\@flux_unc,$n_mc,$chi_sq_min_now,$MIN_CHISQ,$plot);


	my $smooth_ratio=smooth_ratio(pdl(@flux_unc),$pdl_mod_SSP,int($sigma));

	$pdl_mod_SSP_no_cor=$pdl_mod_SSP->copy;
	$pdl_mod_SSP=$pdl_mod_SSP*$smooth_ratio;



#	($min_chi_sq,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP,$coeffs_N_input)=fit_ssp_rnd_guess_lin($redshift,$sigma,\@Av,$crval,$cdelt,$crpix,$nf,$n_c,$pdl_flux_c_ini,\@wave_unc,\@masked,\@e_flux_unc,\@flux_unc,$n_mc,$chi_sq_min_now,$MIN_CHISQ,$plot);

#	($min_chi_sq,$pdl_age_mod,$pdl_met_mod,$pdl_ml,$pdl_Av,$coeffs,$coeffs_N,$coeffs_NM,$pdl_mod_SSP,$pdl_res_SSP)=fit_ssp_rnd($redshift,$sigma,\@Av,$crval,$cdelt,$crpix,$nf,$n_c,$pdl_flux_c_ini,\@wave_unc,\@masked,\@e_flux_unc,\@flux_masked,$n_mc,$chi_sq_min_now,$MIN_CHISQ,$plot);


#	$pdl_mod_JOINT=$pdl_mod_SSP+$pdl_model_elines;
#	$pdl_res_JOINT=$pdl_res_SSP;
	open(C,">$out_coeffs_file");
	print C "# ID   AGE     MET    COEFF   Min.Coeff  log(M/L)   AV   N.Coeff   Err.Coeff\n";
	print "------------------------------------------------------------------------------\n";
	print "ID   AGE     MET    COEFF   Min.Coeff  log(M/L)   AV   N.Coeff   Err.Coeff\n";
	print "------------------------------------------------------------------------------\n";
	@age_mod=list($pdl_age_mod);
	@met_mod=list($pdl_met_mod);
	@Av_mod=list($pdl_Av);
	@ml=list($pdl_ml);
	@a_coeffs=list($coeffs->slice(":,(0)"));
	@a_e_coeffs=list($coeffs->slice(":,(1)"));
	@a_min_coeffs=list($coeffs->slice(":,(2)"));
	@a_coeffs_N=list($coeffs_N);
	my $l_age_min=0;
	my $l_met_min=0;
	my $l_Av_min=0;
	my $l_age_min_mass=0;
	my $l_met_min_mass=0;
	my $l_Av_min_mass=0;
	my $e_l_age_min=0;
	my $e_l_met_min=0;
	my $e_l_Av_min=0;
	my $e_l_age_min_mass=0;
	my $e_l_met_min_mass=0;
	my $e_l_Av_min_mass=0;
	for ($k=0;$k<$nf;$k++) {
	    if ($a_coeffs[$k]>0) {
		$a_e_coeffs_N[$k]=$a_e_coeffs[$k]*($a_coeffs_N[$k]/$a_coeffs[$k]);
	    } else {
		$a_e_coeffs_N[$k]=0;
	    }

	    $l_age_min=$l_age_min+$a_coeffs[$k]*log10($age_mod[$k]);
	    $l_met_min=$l_met_min+$a_coeffs[$k]*log10($met_mod[$k]);
	    $l_Av_min=$l_Av_min+$a_coeffs[$k]*log10($Av_mod[$k]);	    	    

	    $l_age_min_mass=$l_age_min_mass+$ml[$k]*$a_coeffs_N[$k]*log10($age_mod[$k]);
	    $l_met_min_mass=$l_met_min_mass+$ml[$k]*$a_coeffs_N[$k]*log10($met_mod[$k]);
	    $l_Av_min_mass=$l_Av_min_mass+$ml[$k]*$a_coeffs_N[$k]*log10($Av_mod[$k]);

	    $e_l_age_min=$e_l_age_min+$a_e_coeffs[$k]*log10($age_mod[$k]);
	    $e_l_met_min=$e_l_met_min+$a_e_coeffs[$k]*log10($met_mod[$k]);
	    $e_l_Av_min=$e_l_Av_min+$a_e_coeffs[$k]*log10($Av_mod[$k]);	    	    
	    $e_l_age_min_mass=$e_l_age_min_mass+$ml[$k]*$a_e_coeffs_N[$k]*log10($age_mod[$k]);
	    $e_l_met_min_mass=$e_l_met_min_mass+$ml[$k]*$a_e_coeffs_N[$k]*log10($met_mod[$k]);
	    $e_l_Av_min_mass=$e_l_Av_min_mass+$ml[$k]*$a_e_coeffs_N[$k]*log10($Av_mod[$k]);

	    $ML=$ML+$ml[$k]*$a_coeffs_N[$k];
	    $C_ini=$coeffs_N_input->at($k);
	    $e_C_ini=$e_coeffs_N_input->at($k);

	    printf(C "%-2d  %-7.4f %-7.4f %-7.4f %-7.4f    %-4.4f    %-4.2f   %-7.4f %-7.4f\n",$k,$age_mod[$k],$met_mod[$k],$a_coeffs_N[$k],$a_min_coeffs[$k],log10($ml[$k]),$Av_mod[$k],$a_coeffs[$k],$a_e_coeffs[$k]);
	    if ($a_coeffs[$k]>1e-5) {
		printf("%-2d  %-7.4f %-7.4f %-7.4f %-7.4f    %-4.4f    %-4.2f   %-7.4f %-7.4f %-7.4f %-7.4f\n",$k,$age_mod[$k],$met_mod[$k],$a_coeffs_N[$k],$a_min_coeffs[$k],log10($ml[$k]),$Av_mod[$k],$a_coeffs[$k],$a_e_coeffs[$k],$C_ini,$e_C_ini);
	    }
	}
	print "------------------------------------------------------------------------------\n";
	close(C);
	$age_min=10**($l_age_min);
	$met_min=10**($l_met_min);
	$Av_min=10**($l_Av_min);
	$age_min_mass=10**($l_age_min_mass/$ML);
	$met_min_mass=10**($l_met_min_mass/$ML);
	$Av_min_mass=10**($l_Av_min_mass/$ML);

	$e_age_min=abs(0.43*$e_l_age_min*$age_min);
	$e_met_min=abs(0.43*$e_l_met_min*$met_min);
	$e_Av_min=abs(0.43*$e_l_Av_min*$Av_min);
	$e_age_min_mass=abs(0.43*$e_l_age_min*$age_min_mass);
	$e_met_min_mass=abs(0.43*$e_l_met_min*$met_min_mass);
	$e_Av_min_mass=abs(0.43*$e_l_Av_min*$Av_min_mass);

	if ($min_chi_sq>0) {
	    $delta_chi=abs(($chi_sq_min_now-$min_chi_sq)/$min_chi_sq);
	}
    }

    $wpeak=6562;
    $Fpeak=-1e12;


    $pdl_mod_JOINT=$pdl_mod_SSP+$pdl_model_elines;
    $pdl_res_JOINT=$pdl_res_SSP-$pdl_model_elines;
    $pdl_no_gas=pdl(@flux_unc);

#    $pdl_output=pdl(
    # Copy output!
    $t=$pdl_output->slice(":,0");
    $t .=pdl(@flux_unc_org);
    $t=$pdl_output->slice(":,1");
    $t .=$pdl_mod_SSP;
    $t=$pdl_output->slice(":,2");
    $t .=$pdl_mod_JOINT;
    $t=$pdl_output->slice(":,3");
    $pdl_res_SSP=pdl(@flux_unc_org)-$pdl_mod_SSP;

#    print "$pdl_mod_SSP_no_cor\n";
# 
    $pdl_res_SSP_no_cor=pdl(@flux_unc_input)-$pdl_mod_SSP_no_cor;
    $t .=$pdl_res_SSP_no_cor;
    $t=$pdl_output->slice(":,4");
#    $pdl_res_JOINT=pdl(@flux_unc_org)/$pdl_rat_master-$pdl_mod_JOINT;
#
    my $pdl_tmp=pdl(@flux_unc_org);
    $nx_1=$n_unc-1;
    $pdl_res_JOINT=$pdl_tmp/($pdl_rat_master->slice("0:$nx_1"))-$pdl_mod_JOINT;
#    $pdl_res_JOINT=pdl(@flux_unc_org)/$pdl_rat_master-$pdl_mod_JOINT;
    $t .=$pdl_res_JOINT;
    $t=$pdl_output->slice(":,5");
#    $t .=pdl(@flux_unc_org)-();

#    $t .=pdl(@flux_unc_org)-($pdl_res_SSP-$pdl_res_JOINT);
    $t .=pdl(@flux_unc_org)-($pdl_res_SSP-$pdl_res_JOINT);


#$pdl_model_elines;

#    print "WE are here!\n";

#    print "$pdl_output\n";
    # $mean_Av=mean(@Av);
#    plot_results($plot,$pdl_wave_elines,pdl(pdl(@flux_unc_org),$pdl_mod_JOINT,$pdl_res_JOINT,$pdl_mod_SSP,$pdl_res_SSP),$out_ps);
    my $title="X=$chi_sq_now T=$age_min ($age_min_mass) Z=$met_min ($met_min_mass) Av=$Av_min z=$redshift sigma=$sigma";
    plot_results($plot,$pdl_wave_elines,$pdl_output,$out_ps,$title);

#    print "WE are here ---!\n";

    }
    print "I.Iter = $NITER DONE\n";
    $NITER++;

}

# Write output file
$h = {NAXIS=>2, NAXIS1=>$n_unc, NAXIS=>6, COMMENT=>"OUTPUT auto_ssp_elines_rnd.pl FITs"};
$$h{CRVAL1}=$wave_unc[0];
$$h{CDELT1}=$wave_unc[1]-$wave_unc[0];
$$h{CRPIX1}=1;

#$pdl_output->sethdr($h);
#$pdl_output->hdr->{CRVAL1}=$wave_unc[0];
#$pdl_output->hdr->{CDELT1}=$wave_unc[1]-$wave_unc[0];
#$pdl_output->hdr->{CRPIX1}=1;
$pdl_output->sethdr($h);
$pdl_output->wfits($out_fit);
#$pdl_output->rfits($out_fit);
#$h=$pdl_output->gethdr();
#$pdl_output->sethdr($h);
#$pdl_output->wfits($out_fit);

################################

print "--------------------------------------------------------------\n";
my $pdl_masked=pdl(@masked);
my $pdl_chi_now=(($pdl_masked*$pdl_res_JOINT)**2)/((pdl(@e_flux_unc))**2);
$pdl_chi_now->inplace->setnantobad;
$pdl_chi_now->inplace->setbadtoval(0);
#print "$pdl_chi_now\n";
my $chi_joint=sum($pdl_chi_now);
$chi_joint=($chi_joint/($n_unc-$n_mod_fixed-$nf-1))**0.5;

$rms=sigma(list($pdl_masked*$pdl_res_JOINT));

my $j1=int(0.4*$n_unc);
my $j2=int(0.6*$n_unc);

$rms=sigma(list($pdl_res_JOINT->slice("$j1:$j2")));
my $pdl_flux_unc_now=pdl(@flux_unc);
$med_flux=median(list($pdl_flux_unc_now->slice("$j1:$j2")));
#$med_flux=median(




my $title="X=$chi_joint T=$age_min ($age_min_mass) Z=$met_min ($met_min_mass) Av=$Av_min z=$redshift sigma=$sigma";
plot_results($plot,pdl(@wave_unc),$pdl_output,$out_ps,$title);

my $MASS=$ML*$med_flux;

$lML=log10($ML);
print "MSP CHISQ=$chi_joint AGE=$age_min+-$e_age_min MET=$met_min+-$e_met_min AV=$Av_min+-$e_Av_min REDSHIFT=$redshift+-$e_redshift SIGMA_DISP=$sigma+-$e_sigma RMS=$rms MED_FLUX=$med_flux AGE_mass=$age_min_mass+-$e_age_min_mass MET_mass=$met_min_mass+-$e_met_min_mass MASS=$MASS log_M/L=$lML\n";


my $j1=int(0.4*$n_unc);
my $j2=int(0.6*$n_unc);
my $wave_norm=($wave_unc[$j1]+$wave_unc[$j2])/2;

open(FH,">$outfile");
print FH "# (1) MIN_CHISQ\n";
print FH "# (2) LW Age (Gyr)\n";
print FH "# (3) LW Age error\n";
print FH "# (4) LW metallicity\n";
print FH "# (5) LW metallicity error\n";
print FH "# (6) Av\n";
print FH "# (7) AV error\n";
print FH "# (8) redshift \n";
print FH "# (9) redshift error\n";
print FH "# (10) velocity dispersion sigma, in AA\n";
print FH "# (11) velocity dispersion error\n";
print FH "# (12) median_FLUX\n";
print FH "# (13) redshift_ssp\n";
print FH "# (14) med_flux \n";
print FH "# (15) StdDev_residual \n"; 
print FH "# (16) MW Age (Gyr)\n"; 
print FH "# (17) MW Age error\n";
print FH "# (18) MW metallicity\n";
print FH "# (19) MW metallicity error\n";
print FH "# (20) Systemic Velocity km/s \n";
print FH "# (21) Log10 Average Mass-to-Light Ratio \n";
print FH "# SSP_SFH $back_list \n";
print FH "# SSP_KIN $back_list2 \n";
print FH "# WAVE_NORM $wave_norm AA\n";
if ($chi_joint==0) {
    $chi_joint=1;
}

print FH "$chi_joint,$age_min,$e_age_min,$met_min,$e_met_min,$Av_min,$e_Av_min,$redshift,$e_redshift,$sigma,$e_sigma,$FLUX,$redshift_abs,$med_flux,$rms,$age_min_mass,$e_age_min_mass,$met_min_mass,$e_met_min_mass,$SYS_VEL,$lML\n";
close(FH);

$sec_end=print_time();

$sec_total=$sec_end-$sec_ini;
print "# SECONDS = $sec_total\n";


#
# Write the output!
# 
#


exit;


#
# We save the residual spectrum
#
#print "*** n_unc=$n_unc ****** END ******";<stdin>;
open(OUT,">org_spec.txt");
open(OUT2,">org_phot.txt");
for ($j=0;$j<$n_unc;$j++) {
    if ($color_unc[$j]==1) {
	print OUT "$index_unc[$j] $wave_unc[$j] $flux_unc[$j]\n";
    } else {
	print OUT2 "$index_unc[$j] $wave_unc[$j] $flux_unc[$j] $e_flux_unc[$j]\n";
    }
}
close(OUT2);
close(OUT);
#print "EXIT"; exit;

open(OUT,">res_spec.txt");
for ($j=0;$j<$n_unc;$j++) {
    if ($color_unc[$j]==1) {
	print OUT "$index_unc[$j] $wave_unc[$j] $res_spec[$j]\n";
    }
}
close(OUT);



$NBOX=int(9*$sigma);
$N1=int(0.05*$n_unc);
$N2=int(0.95*$n_unc);
$call="smooth_spec_clip.pl res_spec.txt tmp_spec.txt ".$NBOX." /null 2 ".$N1." ".$N2;
system($call);
#print "$call\n";





$call="spec_arith.pl res_spec.txt - tmp_spec.txt gas_spec.txt";
system($call);


open(OUT,">model_spec.txt");
for ($j=0;$j<$n_unc;$j++) {
    if ($color_unc[$j]==1) {
	print OUT "$index_unc[$j] $wave_unc[$j] $model_spec_min[$j]\n";
    }
}
close(OUT);

#
#
$NF=0;
open(MOD,"<out_mod_res.fit_spectra");
@model_joint=@model_spec_min;
@res_joint=@res_spec;
open(OUT,">mod_joint_spec.txt");
open(OUT_RES,">res_joint_spec.txt");
while($line=<MOD>) {
    chop($line);
    @data=split(" ",$line);
    $WMOD=$data[0];
    $FMOD=$data[2];
    $model_joint[$NF]=$model_spec_min[$NF]+$FMOD;
    $res_joint[$NF]=$flux_unc[$NF]-$model_joint[$NF];
    print OUT "$index_unc[$NF] $wave_unc[$NF] $model_joint[$NF]\n";
    print OUT_RES "$index_unc[$NF] $wave_unc[$NF] $res_joint[$NF]\n";
    $NF++;
}
close(OUT);
close(OUT_RES);
close(MOD);


open(OUT,">no_gas_spec.txt");
for ($j=0;$j<$n_unc;$j++) {
    my $dat=$model_spec_min[$j]+$res_joint[$j];
    if ($color_unc[$j]==1) {
	print OUT "$index_unc[$j] $wave_unc[$j] $dat\n";
    }
}
close(OUT);

#while (($MIN_CHISQ>$MIN_DELTA_CHISQ)&&($NITER<$MAX_NITER)) {

if (($wave_norm>0)&&($MAX_NITER>0)) {
#	print "*************** FIT_SINGLE SSP ******************\n";
	$MIN_CHISQ=1e12;
#	$plot=$plot_old;
#	print "Press Enter"; <stdin>;
	
	$min_chi_sq=FIT_SINGLE($redshift,$sigma,\@Av);
	$rms_single=sigma(@res_clean);
	$med_flux_single=median(@flux_clean);
	print "SSP CHISQ=$min_chi_sq AGE=$age_min MET=$met_min AV=@Av REDSHIFT=$redshift SIGMA_DISP=$sigma RMS=$rms_single MED_FLUX=$med_flux_single\n";
#	print "Press Enter"; <stdin>;
	open(FH,">$out_single");
	print FH "#MIN_CHISQ age_min met_min Av redshift sigma median_FLUX redshift_ssp  med_flux rms_residual age_min_mass met_min_mass $new_back_file \n";
	print FH "$min_chi_sq $age_min $met_min $Av_min $redshift $sigma $FLUX $red_abs $red_em $med_flux_single  $rms_single  $age_min $met_min\n";
	close(FH);


	system($call);
}
#    <stdin>;

    
    



$time2=get_time();

print "START $time1\n";
print "END   $time2\n";


$sec_end=print_time();

$sec_total=$sec_end-$sec_ini;
print "# SECONDS = $sec_total\n";
exit;




#require("$F3D/scripts/my_fit_elines_rnd.pl");
